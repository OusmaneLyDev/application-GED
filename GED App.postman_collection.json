{
	"info": {
		"_postman_id": "ee8bfbbe-54cb-4055-9602-6a8174dc1982",
		"name": "GED App",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38098567"
	},
	"item": [
		{
			"name": "Get_Utilisateur",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user).to.have.property('id');",
							"        pm.expect(user).to.have.property('nom');",
							"        pm.expect(user).to.have.property('email');",
							"        pm.expect(user).to.have.property('mot_de_passe');",
							"        pm.expect(user).to.have.property('role');",
							"        pm.expect(user).to.have.property('date_creation');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const users = pm.response.json();",
							"",
							"  users.forEach(function(user) {",
							"    pm.expect(user.email).to.be.a('string').and.to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Date_creation is in a valid date format\", function () {",
							"  const utilisateurData = pm.response.json();",
							"  ",
							"  utilisateurData.forEach(function(utilisateur) {",
							"    pm.expect(utilisateur.date_creation).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3051/api/utilisateurs",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"utilisateurs"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_utilisateur_ById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('id');",
							"  pm.expect(responseData).to.have.property('nom');",
							"  pm.expect(responseData).to.have.property('email');",
							"  pm.expect(responseData).to.have.property('mot_de_passe');",
							"  pm.expect(responseData).to.have.property('role');",
							"  pm.expect(responseData).to.have.property('date_creation');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/, \"Email should be in a valid format\");",
							"});",
							"",
							"",
							"pm.test(\"Role is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.role).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Role should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Date_creation is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.date_creation).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Date_creation should be in valid date format\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3051/api/utilisateurs/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"utilisateurs",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post_Utilisateur",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Utilisateur object is valid\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.utilisateur).to.be.an('object');",
							"  pm.expect(responseData.utilisateur.id).to.be.a('number');",
							"  pm.expect(responseData.utilisateur.nom).to.be.a('string');",
							"  pm.expect(responseData.utilisateur.email).to.be.a('string');",
							"  pm.expect(responseData.utilisateur.mot_de_passe).to.be.a('string');",
							"  pm.expect(responseData.utilisateur.role).to.be.a('string');",
							"  pm.expect(responseData.utilisateur.date_creation).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.utilisateur.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)*(\\.[a-z]{2,})$/, \"Email format is not valid\");",
							"});",
							"",
							"",
							"pm.test(\"Role is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.utilisateur.role).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Role should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Date_creation is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.utilisateur.date_creation).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nom\": \"Souleymane\",\r\n    \"email\": \"souleymane@example.com\",\r\n    \"mot_de_passe\": \"password123\",\r\n    \"role\": \"Administrateur\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3051/api/utilisateurs",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"utilisateurs"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put_Utilisateur",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nom\": \"Seydou Ba\",\r\n    \"email\": \"baseydou@example.com\",\r\n    \"mot_de_passe\": \"password123\",\r\n    \"role\": \"Administrateur\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3051/api/utilisateurs/62",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"utilisateurs",
						"62"
					]
				}
			},
			"response": []
		},
		{
			"name": "Del_Utilisateur",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3051/api/utilisateurs/62",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"utilisateurs",
						"62"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_Document",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the document object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(document) {",
							"        pm.expect(document).to.be.an('object');",
							"        pm.expect(document).to.have.property('id').that.is.a('number');",
							"        pm.expect(document).to.have.property('titre').that.is.a('string');",
							"        pm.expect(document).to.have.property('description').that.is.a('string');",
							"        pm.expect(document).to.have.property('date_depot').that.is.a('string');",
							"        pm.expect(document).to.have.property('date_validation').that.is.a('null');",
							"        pm.expect(document).to.have.property('historique').that.is.a('null');",
							"        pm.expect(document).to.have.property('id_Utilisateur').that.is.a('number');",
							"        pm.expect(document).to.have.property('id_TypeDocument').that.is.a('number');",
							"        pm.expect(document).to.have.property('id_StatutDocument').that.is.a('number');",
							"        pm.expect(document.utilisateur).to.be.an('object');",
							"        pm.expect(document.utilisateur).to.have.property('id').that.is.a('number');",
							"        pm.expect(document.utilisateur).to.have.property('nom').that.is.a('string');",
							"        pm.expect(document.utilisateur).to.have.property('email').that.is.a('string');",
							"        pm.expect(document.utilisateur).to.have.property('mot_de_passe').that.is.a('string');",
							"        pm.expect(document.utilisateur).to.have.property('role').that.is.a('string');",
							"        pm.expect(document.utilisateur).to.have.property('date_creation').that.is.a('string');",
							"        pm.expect(document.typeDocument).to.be.an('object');",
							"        pm.expect(document.typeDocument).to.have.property('id').that.is.a('number');",
							"        pm.expect(document.typeDocument).to.have.property('nom').that.is.a('string');",
							"        pm.expect(document.typeDocument).to.have.property('description').that.is.a('string');",
							"        pm.expect(document.typeDocument).to.have.property('id_Utilisateur').that.is.a('number');",
							"        pm.expect(document.statutDocument).to.be.an('object');",
							"        pm.expect(document.statutDocument).to.have.property('id').that.is.a('number');",
							"        pm.expect(document.statutDocument).to.have.property('nom').that.is.a('string');",
							"        pm.expect(document.statutDocument).to.have.property('description').that.is.a('string');",
							"        pm.expect(document.statutDocument).to.have.property('id_Utilisateur').that.is.a('number');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Date_depot and id_Utilisateur are present and in the correct format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(document) {",
							"    pm.expect(document.date_depot).to.be.a('string');",
							"    pm.expect(document.id_Utilisateur).to.be.a('number');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Utilisateur, typeDocument, and statutDocument objects are present with expected properties\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(doc) {",
							"        pm.expect(doc.utilisateur).to.exist.and.to.be.an('object');",
							"        pm.expect(doc.utilisateur).to.have.property('id').that.is.a('number');",
							"        pm.expect(doc.utilisateur).to.have.property('nom').that.is.a('string');",
							"        pm.expect(doc.utilisateur).to.have.property('email').that.is.a('string');",
							"        pm.expect(doc.utilisateur).to.have.property('mot_de_passe').that.is.a('string');",
							"        pm.expect(doc.utilisateur).to.have.property('role').that.is.a('string');",
							"        pm.expect(doc.utilisateur).to.have.property('date_creation').that.is.a('string');",
							"",
							"        pm.expect(doc.typeDocument).to.exist.and.to.be.an('object');",
							"        pm.expect(doc.typeDocument).to.have.property('id').that.is.a('number');",
							"        pm.expect(doc.typeDocument).to.have.property('nom').that.is.a('string');",
							"        pm.expect(doc.typeDocument).to.have.property('description').that.is.a('string');",
							"        pm.expect(doc.typeDocument).to.have.property('id_Utilisateur').that.is.a('number');",
							"",
							"        pm.expect(doc.statutDocument).to.exist.and.to.be.an('object');",
							"        pm.expect(doc.statutDocument).to.have.property('id').that.is.a('number');",
							"        pm.expect(doc.statutDocument).to.have.property('nom').that.is.a('string');",
							"        pm.expect(doc.statutDocument).to.have.property('description').that.is.a('string');",
							"        pm.expect(doc.statutDocument).to.have.property('id_Utilisateur').that.is.a('number');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3051/api/documents",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"documents"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetDocumentById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, titre, description, date_depot, and id_Utilisateur\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.include.all.keys('id', 'titre', 'description', 'date_depot', 'id_Utilisateur');",
							"});",
							"",
							"",
							"pm.test(\"Date_depot is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.date_depot).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});",
							"",
							"",
							"pm.test(\"Utilisateur object should exist and have valid properties\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.utilisateur).to.exist;",
							"    pm.expect(responseData.utilisateur).to.be.an('object');",
							"    pm.expect(responseData.utilisateur.id).to.be.a('number');",
							"    pm.expect(responseData.utilisateur.nom).to.be.a('string');",
							"    pm.expect(responseData.utilisateur.email).to.match(/\\S+@\\S+\\.\\S+/);",
							"    pm.expect(responseData.utilisateur.mot_de_passe).to.be.a('string');",
							"    pm.expect(responseData.utilisateur.role).to.be.a('string');",
							"    pm.expect(responseData.utilisateur.date_creation).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"TypeDocument and StatutDocument objects are present with expected properties\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.typeDocument).to.exist.and.to.be.an('object').that.includes.all.keys('id', 'nom', 'description', 'id_Utilisateur');",
							"    pm.expect(responseData.statutDocument).to.exist.and.to.be.an('object').that.includes.all.keys('id', 'nom', 'description', 'id_Utilisateur');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3051/api/documents/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"documents",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostDocument",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('titre');",
							"    pm.expect(responseData).to.have.property('description');",
							"    pm.expect(responseData).to.have.property('date_depot');",
							"    pm.expect(responseData).to.have.property('id_Utilisateur');",
							"    pm.expect(responseData).to.have.property('id_TypeDocument');",
							"    pm.expect(responseData).to.have.property('id_StatutDocument');",
							"});",
							"",
							"",
							"pm.test(\"Date_depot is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  if (responseData.date_depot) {",
							"    pm.expect(new Date(responseData.date_depot)).to.not.eql('Invalid Date');",
							"  }",
							"});",
							"",
							"",
							"pm.test(\"Id_Utilisateur and id_TypeDocument are non-negative integers\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id_Utilisateur).to.be.a('number').and.to.satisfy(val => val >= 0, \"Id_Utilisateur should be a non-negative integer\");",
							"  pm.expect(responseData.id_TypeDocument).to.be.a('number').and.to.satisfy(val => val >= 0, \"id_TypeDocument should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"titre\": \"Document Gestionnairet\",\r\n    \"description\": \"Description\",\r\n    \"date_depot\": \"2024-10-26T00:00:00.000Z\",\r\n    \"date_validation\": null,\r\n    \"historique\": null,\r\n    \"id_Utilisateur\": 1,\r\n    \"id_TypeDocument\": 1,\r\n    \"id_StatutDocument\": 1\r\n  \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3051/api/documents",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"documents"
					]
				}
			},
			"response": []
		},
		{
			"name": "PutDocument",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"titre\": \"Document contract\",\r\n    \"description\": \"Description\",\r\n    \"date_depot\": \"2024-10-26T00:00:00.000Z\",\r\n    \"date_validation\": null,\r\n    \"historique\": null,\r\n    \"id_Utilisateur\": 1,\r\n    \"id_TypeDocument\": 1,\r\n    \"id_StatutDocument\": 1\r\n  \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3051/api/documents/114",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"documents",
						"114"
					]
				}
			},
			"response": []
		},
		{
			"name": "DelDocument",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3051/api/documents/114",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"documents",
						"114"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetStatut",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the structure of the response object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item.id).to.exist.and.to.be.a('number');",
							"        pm.expect(item.nom).to.exist.and.to.be.a('string');",
							"        pm.expect(item.description).to.exist.and.to.be.a('string');",
							"        pm.expect(item.id_Utilisateur).to.exist.and.to.be.a('number');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Id should be a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Nom and description must be non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.nom).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nom should not be empty\");",
							"    pm.expect(item.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Id_Utilisateur is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.id_Utilisateur).to.be.a('number').and.to.be.at.least(0);",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3051/api/statuts-document",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"statuts-document"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetStatutById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, nom, description, and id_Utilisateur\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('nom');",
							"    pm.expect(responseData).to.have.property('description');",
							"    pm.expect(responseData).to.have.property('id_Utilisateur');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Description is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3051/api/statuts-document/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"statuts-document",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostStatut",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.expect(pm.response.to.have.status(201));",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('nom');",
							"    pm.expect(responseData).to.have.property('description');",
							"    pm.expect(responseData).to.have.property('id_Utilisateur');",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('number');",
							"    pm.expect(responseData.id).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Description is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Id Utilisateur is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id_Utilisateur).to.exist;",
							"    pm.expect(responseData.id_Utilisateur).to.be.a('number');",
							"    pm.expect(responseData.id_Utilisateur).to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nom\": \"Statut test\",\r\n    \"description\": \"Spiculum despecto eaque arbor vado.\",\r\n    \"id_Utilisateur\": 18\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3051/api/statuts-document",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"statuts-document"
					]
				}
			},
			"response": []
		},
		{
			"name": "PutStatut",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Id field is present and is an integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.exist;",
							"  pm.expect(responseData.id).to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Nom and description fields must be non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.nom).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nom should not be empty\");",
							"    pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Id_Utilisateur is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id_Utilisateur).to.be.a('number');",
							"    pm.expect(responseData.id_Utilisateur).to.be.at.least(0, \"Id_Utilisateur should be a non-negative integer\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nom\": \"Statut test2\",\r\n    \"description\": \"Spiculum despecto eaque arbor vado.\",\r\n    \"id_Utilisateur\": 18\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3051/api/statuts-document/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"statuts-document",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "DelStatut",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Error field is present in the response\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('error');",
							"});",
							"",
							"",
							"pm.test(\"Error field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error field should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Verify response does not contain sensitive information\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3051/api/statuts-document/26",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"statuts-document",
						"26"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTypeDocument",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, nom, description, and id_Utilisateur\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item).to.have.property('id');",
							"        pm.expect(item).to.have.property('nom');",
							"        pm.expect(item).to.have.property('description');",
							"        pm.expect(item).to.have.property('id_Utilisateur');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Nom and description must be non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item).to.have.property('nom').that.is.a('string').and.is.not.empty;",
							"    pm.expect(item).to.have.property('description').that.is.a('string').and.is.not.empty;",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Id_Utilisateur is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.id_Utilisateur).to.be.a('number');",
							"        pm.expect(item.id_Utilisateur).to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3051/api/types-document",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"types-document"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTypeById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Id, nom, description, and id_Utilisateur fields should exist\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.exist;",
							"  pm.expect(responseData.nom).to.exist;",
							"  pm.expect(responseData.description).to.exist;",
							"  pm.expect(responseData.id_Utilisateur).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Id and id_Utilisateur are non-negative integers\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Id should be a non-negative integer\");",
							"  pm.expect(responseData.id_Utilisateur).to.be.a('number').and.to.satisfy((val) => val >= 0, \"id_Utilisateur should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Nom and description should be non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.nom).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nom should not be empty\");",
							"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3051/api/types-document/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"types-document",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "PutTypeDocument",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, nom, description, id_Utilisateur\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('nom');",
							"    pm.expect(responseData).to.have.property('description');",
							"    pm.expect(responseData).to.have.property('id_Utilisateur');",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('number');",
							"    pm.expect(responseData.id).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Nom and description must be non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.nom).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nom should be a non-empty string\");",
							"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"ID_Utilisateur is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id_Utilisateur).to.be.a('number').and.to.satisfy(val => val >= 0, \"ID_Utilisateur should be a non-negative integer\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nom\": \"Contrat test\",\r\n    \"description\": \"Document en cours d'écriture\",\r\n    \"id_Utilisateur\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3051/api/types-document/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"types-document",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostTypeDocument",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('nom');",
							"    pm.expect(responseData).to.have.property('description');",
							"    pm.expect(responseData).to.have.property('id_Utilisateur');",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.id).to.be.a('number');",
							"  pm.expect(responseData.id).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Nom and description should be non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.nom).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nom should not be empty\");",
							"    pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Id Utilisateur is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.id_Utilisateur).to.exist;",
							"  pm.expect(responseData.id_Utilisateur).to.be.a('number');",
							"  pm.expect(responseData.id_Utilisateur).to.satisfy((num) => num >= 0, \"Id Utilisateur should be a non-negative integer\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nom\": \"Contrat pour un test\",\r\n    \"description\": \"Document en cours d'écriture\",\r\n    \"id_Utilisateur\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3051/api/types-document",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3051",
					"path": [
						"api",
						"types-document"
					]
				}
			},
			"response": []
		}
	]
}